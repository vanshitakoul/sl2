# -*- coding: utf-8 -*-
"""art.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pUWM4eP9xqPtTc72UX8N-YWdPCZqqWCS
"""

import numpy as np
import matplotlib.pyplot as plt

class ART1:
    def __init__(self, input_size, rho=0.7):
        self.input_size = input_size
        self.rho = rho
        self.weights = np.random.rand(input_size, 1)
        self.output = None

    def reset(self):

        self.weights = np.random.rand(self.input_size, 1)

    def learn(self, X, max_epochs=100):

        self.reset()
        epochs = 0

        for epoch in range(max_epochs):
            for x in X:

                x = x / np.linalg.norm(x)


                response = np.dot(self.weights.T, x)


                if response >= self.rho:

                    self.weights = self.weights + self.rho * (x - self.weights)
                else:

                    self.weights = x

            epochs += 1
            if epochs % 10 == 0:
                print(f"Epoch {epochs} completed")

        print("Training finished")

    def classify(self, X):

        results = []
        for x in X:

            x = x / np.linalg.norm(x)

            # Compute the response
            response = np.dot(self.weights.T, x)
            if response >= self.rho:
                results.append(1)
            else:
                results.append(0)
        return results


if __name__ == "__main__":

    X_train = np.array([
        [1, 0, 0],
        [0, 1, 0],
        [0, 0, 1],
        [1, 1, 0],
        [1, 0, 1]
    ])


    art1 = ART1(input_size=3, rho=0.7)


    art1.learn(X_train, max_epochs=100)


    X_test = np.array([
        [1, 0, 0],
        [0, 1, 1]
    ])


    predictions = art1.classify(X_test)
    print(f"Predictions: {predictions}")


    plt.scatter(X_train[:, 0], X_train[:, 1], c='blue', label='Training Data')
    plt.scatter(X_test[:, 0], X_test[:, 1], c='red', label='Test Data')
    plt.title('ART1 Training and Testing Data')
    plt.legend()
    plt.show()