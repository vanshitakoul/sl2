# -*- coding: utf-8 -*-
"""backpropagation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q0elEHTB9N9kckeBdJlba0o1nA2cVcDU
"""

import numpy as np

# Sigmoid activation and derivative
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

# XOR inputs and expected outputs
X = np.array([[0, 0],
              [0, 1],
              [1, 0],
              [1, 1]])

y = np.array([[0],
              [1],
              [1],
              [0]])

# Initialize weights and biases
np.random.seed(1)  # for reproducibility

# Input layer (2) -> Hidden layer (2)
weights_input_hidden = np.random.rand(2, 2)
bias_hidden = np.random.rand(1, 2)

# Hidden layer (2) -> Output layer (1)
weights_hidden_output = np.random.rand(2, 1)
bias_output = np.random.rand(1, 1)

# Training loop
learning_rate = 0.5
epochs = 10000

for epoch in range(epochs):
    # --- FORWARD PASS ---
    hidden_input = np.dot(X, weights_input_hidden) + bias_hidden
    hidden_output = sigmoid(hidden_input)

    final_input = np.dot(hidden_output, weights_hidden_output) + bias_output
    final_output = sigmoid(final_input)

    # --- BACKPROPAGATION ---
    error = y - final_output
    output_delta = error * sigmoid_derivative(final_output)

    hidden_error = output_delta.dot(weights_hidden_output.T)
    hidden_delta = hidden_error * sigmoid_derivative(hidden_output)

    # --- WEIGHTS & BIASES UPDATE ---
    weights_hidden_output += hidden_output.T.dot(output_delta) * learning_rate
    bias_output += np.sum(output_delta, axis=0, keepdims=True) * learning_rate

    weights_input_hidden += X.T.dot(hidden_delta) * learning_rate
    bias_hidden += np.sum(hidden_delta, axis=0, keepdims=True) * learning_rate

# --- FINAL OUTPUT ---
print("Final Output after training:\n", final_output.round())